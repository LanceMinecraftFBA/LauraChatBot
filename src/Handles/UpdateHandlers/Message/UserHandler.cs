using Telegram.Bot;
using Telegram.Bot.Types.Enums;

using LauraChatManager.Types;
using LauraChatManager.Handles.Other;
using LauraChatManager.Buttons;

namespace LauraChatManager.Handles.UpdateHandlers.Message {
    public class UserHandler {
        public static async Task Invoke(ITelegramBotClient bot, Telegram.Bot.Types.Message msg) {
            var text = msg.Text;
            var userId = msg.From.Id;
            var fullName = msg.From.FirstName;
            var sharedChat = msg.ChatShared;

            if(!Program.UsersRaw.ContainsKey(userId)) {
                Program.UsersRaw.Add(userId, false);
                await UsersDataTables.InsertUser(userId);
                await UsersDataTables.CreateUserWarns(userId);
            }

            if(Program.UsersRaw[userId]) {
                return;
            
            }

            if(sharedChat != null) {
                var chat = await bot.GetChatAsync(sharedChat.ChatId);
                if(!Program.ChatsRaw.Contains(sharedChat.ChatId)) {
                    await bot.SendTextMessageAsync(userId, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –í—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–µ–Ω—èüòå");
                }
                else {
                    await bot.SendTextMessageAsync(userId, $"‚öôÔ∏è–ó–∞–≥—Ä—É–∂–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞ \"{chat.Title}\"");
                    var chatConfig = new Chat();
                    foreach(var chatC in Program.Chats) {
                        if(chatC.Id == chat.Id) {
                            chatConfig = chatC;
                            chatConfig.SettingsState = Types.Enums.SettingsState.Main;
                            break;
                        }
                    }
                    await ChatsDataTables.UpdateChatConfig(chatConfig);
                }
            }

            if(text != null) {
                await Program.WriteDebbug($"New message text by user '{fullName}' | '{userId}': {text}");
                if(text.ToLower() == "/start")
                    await bot.SendTextMessageAsync(userId, $"–ü—Ä–∏–≤–µ—Ç, <a href=\"tg://user?id={userId}\">{fullName}</a>! –Ø —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞–º–∏. –Ø –õ–∞—É—Ä–∞, –≤–∞—à —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä. –ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —á–∞—Ç–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É —Å—ã–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏ –≤ –∏–≥—Ä—ã! üòä\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", parseMode: ParseMode.Html, disableWebPagePreview: true, replyMarkup: Buttons.Buttons.GetUserMenu());
                if(text.ToLower() == "/help")
                    await bot.SendTextMessageAsync(
                        userId,
$@"<b>‚å®Ô∏è–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>

<b><i>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã</i></b>
- /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
- .—Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞",
                        parseMode: ParseMode.Html
                    );
                if(text.ToLower() == ".—Å–æ—Å—Ç–æ—è–Ω–∏–µ") {
                    TimeSpan time = Program.NextLarxUpdate - DateTime.UtcNow;
                    await bot.SendTextMessageAsync(
                        chatId: userId,
                        text:
                        @$"<b>–ú–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µüå∏:</b>
- –ü–∏–Ω–≥: <code>{Program.Ping} –º—Å</code>
- –ü–∏–Ω–≥ –±–∞–∑—ã: <code>{Program.DbPing} –º—Å</code>
- RAM: <code>{Program.RamUsage} –ú–ë</code>

<b><i>–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: </i></b>
<code>{time.Hours} —á–∞—Å–æ–≤ {time.Minutes} –º–∏–Ω—É—Ç {time.Seconds} —Å–µ–∫—É–Ω–¥</code>",
                        parseMode: ParseMode.Html);
                }
            }
        }
    }
}
