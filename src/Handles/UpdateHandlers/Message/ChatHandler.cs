using System.Globalization;
using System.Net.Mime;
using LauraChatManager.Buttons;
using LauraChatManager.Handles.Other;
using LauraChatManager.Methods;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using File = System.IO.File;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Formats.Jpeg;
using SixLabors.ImageSharp.Formats.Png;
using SixLabors.ImageSharp.Formats.Webp;
using SixLabors.ImageSharp.Processing;

namespace LauraChatManager.Handles.UpdateHandlers.Message {
    public class ChatHandler {
        private static readonly ChatPermissions mutePermissions = new() { CanSendMessages = false, CanSendAudios = false, CanSendDocuments = false, CanSendPhotos = false, CanSendVideos = false, CanSendVideoNotes = false, CanSendPolls = false, CanSendVoiceNotes = false, CanSendOtherMessages = false };
        
        public static async Task Invoke(ITelegramBotClient bot, Telegram.Bot.Types.Message msg) {
            if(msg.Chat.Type == ChatType.Channel) {
                await Program.WriteDebbug($"{msg.Chat.Id} | {msg.Text}");
                return;
            }
            var text = msg.Text;
            var photo = msg.Photo;
            var chat = msg.Chat;
            var user = msg.From;
            var newChatMembers = msg.NewChatMembers;
            var leftChatMember = msg.LeftChatMember;
            
            if(!Program.ChatsRaw.Contains(chat.Id) && chat.Type == ChatType.Supergroup) {
                Program.ChatsRaw.Add(chat.Id);
                await ChatsDataTables.InsertNewChat(chat.Id);
                await ChatsDataTables.CreateUsersCaptchaTable(chat.Id);
            }

            if(Program.UsersRaw.ContainsKey(user.Id) && Program.UsersRaw[user.Id])
                return;
            
            if(msg.Photo != null) {
                var is_prem = false;
                for(int i = 0; i < 1; i++) {
                    if(Program.Collections.PremiumChats[i].Id == chat.Id) {
                        is_prem = true;
                        break;
                    }
                }
                if(is_prem) {
                    if(!Directory.Exists("TempPhotos"))
                        Directory.CreateDirectory("TempPhotos");
                    var PhotoF = photo[3];
                    var file = await bot.GetFileAsync(PhotoF.FileId);
                    var dest = $"./TempPhotos/img{PhotoF.FileUniqueId}.jpg";
                    
                    Stream stream = File.Create(dest);
                    await bot.DownloadFileAsync(file.FilePath, stream);
                    await stream.DisposeAsync();
                    
                    var nsfwObject = await NsfwDetecter.GetNsfwScan(dest);
                    if(double.Parse(nsfwObject.Hentai.ToString("F3")) >= 0.17) {
                        var member = await bot.GetChatMemberAsync(chat.Id, user.Id);
                        var botMemb = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                        
                        var status = member.Status;
                        
                        if(status == ChatMemberStatus.Creator) {
                            status = ChatMemberStatus.Administrator;
                        }
                        
                        if(botMemb.Status != ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Ö–µ–Ω—Ç–∞–π-—Ñ–æ—Ç–∫—Éü§î?",
                                messageThreadId: msg.MessageThreadId,
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                        }
                        else if(status == ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Ö–µ–Ω—Ç–∞–π-—Ñ–æ—Ç–∫—É, –µ—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞—â–∏—â–∞—Ç—å —á–∞—Çü§î?",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                        else {
                            await bot.SendTextMessageAsync(
                                chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –∑–∞ —Ö–µ–Ω—Ç–∞–π-—Ñ–æ—Ç–∫—Éüí¢",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.BanChatMemberAsync(
                                chat.Id,
                                user.Id);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                    }
                    else if(double.Parse(nsfwObject.Porn.ToString("F3")) >= 0.17) {
                        await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        var member = await bot.GetChatMemberAsync(chat.Id, user.Id);
                        var botMemb = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                        
                        var status = member.Status;
                        
                        if(status == ChatMemberStatus.Creator) {
                            status = ChatMemberStatus.Administrator;
                        }
                        
                        if(botMemb.Status != ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª –ø–æ—Ä–Ω–æ-—Ñ–æ—Ç–∫—Éü§î?",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                        }
                        else if(status == ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª –ø–æ—Ä–Ω–æ-—Ñ–æ—Ç–∫—É, –µ—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞—â–∏—â–∞—Ç—å —á–∞—Çü§î?",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                        else {
                            await bot.SendTextMessageAsync(
                                chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –∑–∞ –ø–æ—Ä–Ω–æ-—Ñ–æ—Ç–∫—Éüí¢",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.BanChatMemberAsync(
                                chat.Id,
                                user.Id);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                    }
                    else if(double.Parse(nsfwObject.Sexy.ToString("F3")) >= 0.40) {
                        var member = await bot.GetChatMemberAsync(chat.Id, user.Id);
                        var botMemb = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);

                        var status = member.Status;

                        if(status == ChatMemberStatus.Creator) {
                            status = ChatMemberStatus.Administrator;
                        }
                        
                        if(botMemb.Status != ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Å–ª–∏—à–∫–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é —Ñ–æ—Ç–∫—Éü§î?",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                        }
                        else if(status == ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Å–ª–∏—à–∫–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é —Ñ–æ—Ç–∫—É, –µ—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞—â–∏—â–∞—Ç—å —á–∞—Çü§î?",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                        else {
                            await bot.SendTextMessageAsync(
                                chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –∑–∞ —Å–ª–∏—à–∫–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é —Ñ–æ—Ç–∫—Éüí¢",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.BanChatMemberAsync(
                                chat.Id,
                                user.Id);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                    }
                    foreach(var fileT in Directory.GetFiles("TempPhotos")) {
                        File.Delete(fileT);
                    }
                }
            }
            if(msg.Sticker != null) {
                var is_prem = false;
                for(int i = 0; i < 1; i++) {
                    if(Program.Collections.PremiumChats[i].Id == chat.Id) {
                        is_prem = true;
                        break;
                    }
                }
                if(is_prem) {
                    if(!Directory.Exists("TempPhotos"))
                        Directory.CreateDirectory("TempPhotos");
                    var PhotoF = msg.Sticker;
                    var file = await bot.GetFileAsync(PhotoF.FileId);
                    var path = $"./TempPhotos/img{PhotoF.FileUniqueId}.jpg";
                    var dest = $"./TempPhotos/img{PhotoF.FileUniqueId}.png";
                    
                    Stream stream = File.Create(dest);
                    await bot.DownloadFileAsync(file.FilePath, stream);
                    await stream.DisposeAsync();
                    
                    using var img = await Image.LoadAsync(dest);
                    await img.SaveAsync(path, new JpegEncoder());
                    img.Dispose();
                    
                    var nsfwObject = await NsfwDetecter.GetNsfwScan(path);
                    if(double.Parse(nsfwObject.Hentai.ToString("F3")) >= 0.17) {
                        var member = await bot.GetChatMemberAsync(chat.Id, user.Id);
                        var botMemb = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                        
                        var status = member.Status;
                        
                        if(status == ChatMemberStatus.Creator) {
                            status = ChatMemberStatus.Administrator;
                        }
                        
                        if(botMemb.Status != ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Ö–µ–Ω—Ç–∞–π-—Å—Ç–∏–∫–µ—Ä?",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                        }
                        else if(status == ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Ö–µ–Ω—Ç–∞–π-—Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞—â–∏—â–∞—Ç—å —á–∞—Çü§î?",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                        else {
                            await bot.SendTextMessageAsync(
                                chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –∑–∞ —Ö–µ–Ω—Ç–∞–π-—Å—Ç–∏–∫–µ—Äüí¢",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.BanChatMemberAsync(
                                chat.Id,
                                user.Id);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                    }
                    else if(double.Parse(nsfwObject.Porn.ToString("F3")) >= 0.17) {
                        var member = await bot.GetChatMemberAsync(chat.Id, user.Id);
                        var botMemb = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                        
                        var status = member.Status;
                        
                        if(status == ChatMemberStatus.Creator) {
                            status = ChatMemberStatus.Administrator;
                        }
                        
                        if(botMemb.Status != ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª –ø–æ—Ä–Ω–æ-—Å—Ç–∏–∫–µ—Äü§î?",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                        }
                        else if(status == ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª –ø–æ—Ä–Ω–æ-—Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞—â–∏—â–∞—Ç—å —á–∞—Çü§î?",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                        else {
                            await bot.SendTextMessageAsync(
                                chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –∑–∞ –ø–æ—Ä–Ω–æ-—Å—Ç–∏–∫–µ—Äüí¢",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.BanChatMemberAsync(
                                chat.Id,
                                user.Id);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                    }
                    else if(double.Parse(nsfwObject.Sexy.ToString("F3")) >= 0.40) {
                        var member = await bot.GetChatMemberAsync(chat.Id, user.Id);
                        var botMemb = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);

                        var status = member.Status;

                        if(status == ChatMemberStatus.Creator) {
                            status = ChatMemberStatus.Administrator;
                        }
                        
                        if(botMemb.Status != ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Å–ª–∏—à–∫–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω—É–π —Å—Ç–∏–∫–µ—Äü§î?",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                        }
                        else if(status == ChatMemberStatus.Administrator) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a>, –Ω–∞—Ñ–∏–≥–∞ —Ç—ã –∫–∏–Ω—É–ª —Å–ª–∏—à–∫–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω—É–π —Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞—â–∏—â–∞—Ç—å —á–∞—Çü§î?",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                        else {
                            await bot.SendTextMessageAsync(
                                chat.Id,
                                text: $"<a href=\"tg://user?id={user.Id}\">{user.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –∑–∞ —Å–ª–∏—à–∫–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Äüí¢",
                                messageThreadId: msg.MessageThreadId,
                                parseMode: ParseMode.Html,
                                disableWebPagePreview: true);
                            await bot.BanChatMemberAsync(
                                chat.Id,
                                user.Id);
                            await bot.DeleteMessageAsync(chat.Id, msg.MessageId);
                        }
                    }
                    foreach(var fileT in Directory.GetFiles("TempPhotos")) {
                        File.Delete(fileT);
                    }
                }
            }
            if(newChatMembers != null) {
                if(newChatMembers[0].Id == Program.Bot.Id) {
                    await Program.WriteDebbug($"Bot added to chat '{chat.Title}' | '{chat.Id}' | '{Program.ChannelBase[(chat.Id + 1000000000000)*-1]}' ");
                    await bot.SendTextMessageAsync(chat.Id,
                    @"<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ —á–∞—Çüòä!</b>
‚ùï–ï—Å–ª–∏ –í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
                    parseMode: ParseMode.Html);
                }
                else{
                    var chatL = Program.Chats[Program.ChatsRaw.IndexOf(chat.Id)];
                    await bot.SendTextMessageAsync(chat.Id,
                        $"<b>üëãüèª–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç \"{chat.Title}\", <a href=\"tg://user?id={newChatMembers[0].Id}\">{newChatMembers[0].FirstName}</a>!</b>",
                        parseMode: ParseMode.Html,
                        disableWebPagePreview: true);
                    if(chatL.Rules != null) {
                        var messg = await bot.SendTextMessageAsync(chat.Id,
                            "–ü—Ä–æ—á—Ç–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –Ω–∏–∂–µüëáüèª");
                        await bot.SendTextMessageAsync(chat.Id,
                            chatL.Rules,
                            parseMode: ParseMode.Html,
                            replyToMessageId: messg.MessageId);
                    }
                }
            }
            if(leftChatMember != null) {
                if(leftChatMember.Id == Program.Bot.Id) {
                    var chatL = Program.Chats[Program.ChatsRaw.IndexOf(chat.Id)];
                    await Program.WriteDebbug($"Bot removed from chat '{chat.Title}' | '{chat.Id}' ");
                    await Cleaner.DeleteChatData(chatL);
                    Program.ChatsRaw.Remove(chat.Id);
                    Program.ChannelBase.Remove((chat.Id + 1000000000000)*-1);
                }
                else if(user.Id != Program.Bot.Id) {
                    await bot.SendTextMessageAsync(chat.Id, $"<b><a href=\"tg://user?id={leftChatMember.Id}\">{leftChatMember.FirstName}</a> –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Åüòï</b>", parseMode: ParseMode.Html, disableWebPagePreview: true);
                }
            }
            if(text != null) {
                await Program.WriteDebbug($"New message from chat '{chat.Title}' | '{chat.Id}' by user '{user.FirstName}' | '{user.Id}': {text}");
                if(text.ToLower() == "/help" || text.ToLower() == "/help@" + Program.Bot.Username.ToLower()) {
                    int? threadId = msg.MessageThreadId;
                    await bot.SendTextMessageAsync(
                        chatId: chat.Id,
                        messageThreadId: threadId,
                        text: $@"<b>‚å®Ô∏è–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>",
                        parseMode: ParseMode.Html
                    );
                }
                
                #region Admin commands without parameters
                if(text.ToLower() == ".–±–∞–Ω") {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);
                    
                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        if(msg.ReplyToMessage == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–Ω–∞—Ç—å!</b>\n–Ø –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ –±–∞–Ω–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞üôÉ",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            var replyUser = msg.ReplyToMessage.From;
                            var targetUser = await bot.GetChatMemberAsync(chat.Id, replyUser.Id);
                            
                            var targetUserAdministrator = targetUser.Status;
                            if(targetUser.Status == ChatMemberStatus.Creator)
                                targetUserAdministrator = ChatMemberStatus.Administrator;
                            
                            if(replyUser.Id == Program.Bot.Id)
                                await bot.SendTextMessageAsync(chat.Id,
                                text: "–ú–µ–Ω—è –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è –∂–µü§°",
                                replyToMessageId: msg.MessageId);
                            
                            else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                await bot.SendTextMessageAsync(chatId: chat.Id,
                                    text: $"–¢–µ–±–µ –±—ã —Å—Ç–æ–∏–ª–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –º–∏—Ä–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–ºüòë.\n\n–Ø –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è –≤ –≤–∞—à—É –≤–æ–π–Ω—Éüòí",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                            else {
                                await bot.BanChatMemberAsync(chat.Id, replyUser.Id);
                                await bot.SendTextMessageAsync(chat.Id,
                                    text: $"üí¢–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–∑ —á–∞—Ç–∞!",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                        }
                    }
                }
                if(text.ToLower() == ".—Ä–∞–∑–±–∞–Ω") {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);
                    
                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        if(msg.ReplyToMessage == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–µ—Ä–Ω—É—Ç—å!</b>\n–Ø –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞üôÉ",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            var replyUser = msg.ReplyToMessage.From;
                            var targetUser = await bot.GetChatMemberAsync(chat.Id, replyUser.Id);
                            
                            var targetUserAdministrator = targetUser.Status;
                            if(targetUser.Status == ChatMemberStatus.Creator)
                                targetUserAdministrator = ChatMemberStatus.Administrator;
                            
                            if(replyUser.Id == Program.Bot.Id)
                                await bot.SendTextMessageAsync(chat.Id,
                                text: "–ó–∞—á–µ–º –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Å–µ–±–µ —Ä–∞–∑–±–∞–Ω, –µ—Å–ª–∏ —è —Å–∞–º–∞ –∂–µ –∑–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äü§î?",
                                replyToMessageId: msg.MessageId);
                            
                            else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                await bot.SendTextMessageAsync(chatId: chat.Id,
                                    text: $"<b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> —Ç–æ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòë.",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                            else {
                                await bot.UnbanChatMemberAsync(chat.Id, replyUser.Id);
                                await bot.SendTextMessageAsync(chat.Id,
                                    text: $"<b>‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –≤—ã–Ω–µ—Å–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!</b>\n–ù–∞–¥–µ—é—Å—å –æ–Ω –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç —Å–≤–æ–∏ –æ—à–∏–±–∫–∏üôÇ",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                        }
                    }
                }
                if(text.ToLower() == ".–º—É—Ç") {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);
                    
                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else if(chat.Type != ChatType.Supergroup) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        if(msg.ReplyToMessage == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–≥–ª—É—à–∏—Ç—å!</b>\n–Ø –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ –≥–ª—É—à–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞üôÉ",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            var replyUser = msg.ReplyToMessage.From;
                            var targetUser = await bot.GetChatMemberAsync(chat.Id, replyUser.Id);
                            
                            var targetUserAdministrator = targetUser.Status;
                            if(targetUser.Status == ChatMemberStatus.Creator)
                                targetUserAdministrator = ChatMemberStatus.Administrator;
                            
                            if(replyUser.Id == Program.Bot.Id)
                                await bot.SendTextMessageAsync(chat.Id,
                                text: "–ï—Å–ª–∏ —è –∑–∞–≥–ª—É—à—É —Å–µ–±—è, —Ç–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—èü§î?",
                                replyToMessageId: msg.MessageId);
                            
                            else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                await bot.SendTextMessageAsync(chatId: chat.Id,
                                    text: $"<b>–ó–∞–≥–ª—É—à–∏—Ç—å <a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> —è –Ω–µ –º–æ–≥—É, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòë.\n\n–°–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±—Å—É–∂–¥–∞–π—Ç–µ –≤ –ª–∏—á–∫–∞—Öüò†!",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                            else {
                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMinutes(15), permissions: mutePermissions);
                                await bot.SendTextMessageAsync(chat.Id,
                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                        }
                    }
                }
                if(text.ToLower() == ".—Ä–∞–∑–º—É—Ç") {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);
                    
                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else if(chat.Type != ChatType.Supergroup) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        if(msg.ReplyToMessage == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –æ–±—â–µ–Ω–∏–µ!</b>\n–Ø –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ —Å–Ω–∏–º–∞—Ç—å –º—É—Ç —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞üôÉ",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            var replyUser = msg.ReplyToMessage.From;
                            var targetUser = await bot.GetChatMemberAsync(chat.Id, replyUser.Id);
                            
                            var targetUserAdministrator = targetUser.Status;
                            if(targetUser.Status == ChatMemberStatus.Creator)
                                targetUserAdministrator = ChatMemberStatus.Administrator;
                            
                            if(replyUser.Id == Program.Bot.Id)
                                await bot.SendTextMessageAsync(chat.Id,
                                text: "–ó–∞—á–µ–º –º–Ω–µ —Å–Ω–∏–º–∞—Ç—å —Å —Å–µ–±—è –º—É—Ç, –µ—Å–ª–∏ —è –∏ —Ç–∞–∫ –≥–æ–≤–æ—Ä—é —Å–≤–æ–±–æ–¥–Ω–æü§î?",
                                replyToMessageId: msg.MessageId);
                            
                            else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                await bot.SendTextMessageAsync(chatId: chat.Id,
                                    text: $"<b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üòë.",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                            else {
                                try {
                                    await bot.PromoteChatMemberAsync(chat.Id, replyUser.Id);
                                }
                                catch(ApiRequestException exc) {
                                    if(exc.Message.Contains("bots can't add new chat members"))
                                        await bot.SendTextMessageAsync(chat.Id,
                                            text: $"<b>‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—è</b>\n–ù–∞–¥–µ—é—Å—å —Å—Å–æ—Ä–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ –æ–Ω –±—É–¥–µ—Ç –≤ –ª–∏—á–∫–µüôÇ",
                                            replyToMessageId: msg.MessageId,
                                            parseMode: ParseMode.Html,
                                            disableWebPagePreview: true);
                                }
                            }
                        }
                    }
                }
                if(text.ToLower() == "/chatid") {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);

                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        await bot.SendTextMessageAsync(chat.Id,
                        text: $"<b>üÜîID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: </b> <code>{chat.Id}</code>",
                        replyToMessageId: msg.MessageId,
                        parseMode: ParseMode.Html);
                    }
                }
                #endregion

                #region Admin commands with parameters
                if(text.ToLower().StartsWith(".–±–∞–Ω @")) {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);

                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;

                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        var userTemp = await TelegramApiMethods.GetUserByUsernameAsync(text.ToLower().Split(".–±–∞–Ω @")[1].Split(" ")[0]);
                        if(userTemp == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É!</b>",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            try {
                                var targetUser = await bot.GetChatMemberAsync(chat.Id, userTemp.ID);

                                var targetUserAdministrator = targetUser.Status;
                                if(targetUser.Status == ChatMemberStatus.Creator)
                                    targetUserAdministrator = ChatMemberStatus.Administrator;
                                
                                if(userTemp.ID == Program.Bot.Id)
                                    await bot.SendTextMessageAsync(chat.Id,
                                    text: "–ú–µ–Ω—è –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è –∂–µü§°",
                                    replyToMessageId: msg.MessageId);
                                
                                else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                    await bot.SendTextMessageAsync(chatId: chat.Id,
                                        text: $"–¢–µ–±–µ –±—ã —Å—Ç–æ–∏–ª–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å <b><a href=\"tg://user?id={userTemp.ID}\">{userTemp.first_name}</a></b> –º–∏—Ä–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–ºüòë.\n\n–Ø –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è –≤ –≤–∞—à—É –≤–æ–π–Ω—Éüòí",
                                        replyToMessageId: msg.MessageId,
                                        parseMode: ParseMode.Html,
                                        disableWebPagePreview: true);
                                }
                                else {
                                    try {
                                        await bot.BanChatMemberAsync(chat.Id, userTemp.ID);
                                        await bot.SendTextMessageAsync(chat.Id,
                                            text: $"üí¢–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={userTemp.ID}\">{userTemp.first_name}</a></b> –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–∑ —á–∞—Ç–∞!",
                                            replyToMessageId: msg.MessageId,
                                            parseMode: ParseMode.Html,
                                            disableWebPagePreview: true);
                                    }
                                    catch(Exception exc) {
                                        await bot.SendTextMessageAsync(chat.Id,
                                            text: $"‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: <code>{exc.Message}</code>",
                                            replyToMessageId: msg.MessageId,
                                            parseMode: ParseMode.Html);
                                        await Program.WriteError($"TelegramBotApi in '.–±–∞–Ω @' | ban by username: {exc.Message}");
                                    }
                                }
                            }
                            catch(Exception exc) {
                                await bot.SendTextMessageAsync(chat.Id,
                                    text: $"‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: <code>{exc.Message}</code>\n–í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html);
                                await Program.WriteError($"TelegramBotApi in '.–±–∞–Ω @' | ban by username: {exc.Message}");
                            }
                        }
                    }
                }
                if(text.ToLower().StartsWith(".—Ä–∞–∑–±–∞–Ω @")) {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);

                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;

                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        var userTemp = await TelegramApiMethods.GetUserByUsernameAsync(text.ToLower().Split(".—Ä–∞–∑–±–∞–Ω @")[1].Split(" ")[0]);
                        if(userTemp == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É!</b>",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            try {
                                var targetUser = await bot.GetChatMemberAsync(chat.Id, userTemp.ID);
                                var targetUserAdministrator = targetUser.Status;
                                if(targetUser.Status == ChatMemberStatus.Creator)
                                    targetUserAdministrator = ChatMemberStatus.Administrator;

                                if(userTemp.ID == Program.Bot.Id)
                                    await bot.SendTextMessageAsync(chat.Id,
                                    text: "–ó–∞—á–µ–º –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Å–µ–±–µ —Ä–∞–∑–±–∞–Ω, –µ—Å–ª–∏ —è —Å–∞–º–∞ –∂–µ –∑–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äü§î?",
                                    replyToMessageId: msg.MessageId);

                                else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                    await bot.SendTextMessageAsync(chatId: chat.Id,
                                        text: $"<b><a href=\"tg://user?id={userTemp.ID}\">{userTemp.first_name}</a></b> —Ç–æ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòë.",
                                        replyToMessageId: msg.MessageId,
                                        parseMode: ParseMode.Html,
                                        disableWebPagePreview: true);
                                }
                                else {
                                    try {
                                        await bot.UnbanChatMemberAsync(chat.Id, userTemp.ID);
                                        await bot.SendTextMessageAsync(chat.Id,
                                            text: $"<b>‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={userTemp.ID}\">{userTemp.first_name}</a></b> –≤—ã–Ω–µ—Å–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!</b>\n–ù–∞–¥–µ—é—Å—å –æ–Ω –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç —Å–≤–æ–∏ –æ—à–∏–±–∫–∏üôÇ",
                                            replyToMessageId: msg.MessageId,
                                            parseMode: ParseMode.Html,
                                            disableWebPagePreview: true);
                                    }
                                    catch(Exception exc) {
                                        await bot.SendTextMessageAsync(chat.Id,
                                            text: $"‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: <code>{exc.Message}</code>\n–í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞",
                                            replyToMessageId: msg.MessageId,
                                            parseMode: ParseMode.Html);
                                        await Program.WriteError($"TelegramBotApi in '.—Ä–∞–∑–±–∞–Ω @' | ban by username: {exc.Message}");
                                    }
                                }
                            }
                            catch(Exception exc) {
                                await Program.WriteError($"TelegramBotApi in '.—Ä–∞–∑–±–∞–Ω @' | ban by username: {exc.Message}");
                                await bot.SendTextMessageAsync(chat.Id,
                                    text: $"‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: <code>{exc.Message}</code>\n–í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html);
                            }
                        }
                    }
                }
                if(text.ToLower().StartsWith(".—Ä–∞–∑–º—É—Ç @")) {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);

                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;

                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else if(chat.Type != ChatType.Supergroup) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        var userTemp = await TelegramApiMethods.GetUserByUsernameAsync(text.ToLower().Split(".—Ä–∞–∑–º—É—Ç @")[1].Split(" ")[0]);
                        if(userTemp == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É!</b>",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            try {
                                var targetUser = await bot.GetChatMemberAsync(chat.Id, userTemp.ID);
                                var targetUserAdministrator = targetUser.Status;
                                if(targetUser.Status == ChatMemberStatus.Creator)
                                    targetUserAdministrator = ChatMemberStatus.Administrator;

                                if(userTemp.ID == Program.Bot.Id)
                                    await bot.SendTextMessageAsync(chat.Id,
                                    text: "–ó–∞—á–µ–º –º–Ω–µ —Å–Ω–∏–º–∞—Ç—å —Å —Å–µ–±—è –º—É—Ç, –µ—Å–ª–∏ —è –∏ —Ç–∞–∫ –≥–æ–≤–æ—Ä—é —Å–≤–æ–±–æ–¥–Ω–æü§î?",
                                    replyToMessageId: msg.MessageId);

                                else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                    await bot.SendTextMessageAsync(chatId: chat.Id,
                                        text: $"<b><a href=\"tg://user?id={userTemp.ID}\">{userTemp.first_name}</a></b> —Ç–æ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòë.",
                                        replyToMessageId: msg.MessageId,
                                        parseMode: ParseMode.Html,
                                        disableWebPagePreview: true);
                                }
                                else {
                                    try {
                                        await bot.PromoteChatMemberAsync(chat.Id, userTemp.ID);
                                    }
                                    catch(Exception exc) {
                                        if(exc.Message.Contains("bots can't add new chat members"))
                                            await bot.SendTextMessageAsync(chat.Id,
                                                text: $"<b>‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={userTemp.ID}\">{userTemp.first_name}</a></b> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—è</b>\n–ù–∞–¥–µ—é—Å—å —Å—Å–æ—Ä–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ –æ–Ω –±—É–¥–µ—Ç –≤ –ª–∏—á–∫–µüôÇ",
                                                replyToMessageId: msg.MessageId,
                                                parseMode: ParseMode.Html,
                                                disableWebPagePreview: true);
                                        else {
                                            await Program.WriteError($"TelegramBotApi in '.—Ä–∞–∑–º—É—Ç @' | ban by username: {exc.Message}");
                                            await bot.SendTextMessageAsync(chat.Id,
                                                text: $"‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: <code>{exc.Message}</code>\n–í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞",
                                                replyToMessageId: msg.MessageId,
                                                parseMode: ParseMode.Html);                                       
                                        }
                                    }
                                }
                            }
                            catch(Exception exc) {
                                await Program.WriteError($"TelegramBotApi in '.—Ä–∞–∑–º—É—Ç @' | ban by username: {exc.Message}");
                                await bot.SendTextMessageAsync(chat.Id,
                                    text: $"‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: <code>{exc.Message}</code>\n–í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html);    
                            }
                        }
                    }
                }
                if(text.ToLower().StartsWith(".–º—É—Ç ")) {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);

                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else if(chat.Type != ChatType.Supergroup) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        if(msg.ReplyToMessage == null) {
                            await bot.SendTextMessageAsync(chatId: chat.Id,
                                text: "<b>‚ùóÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–≥–ª—É—à–∏—Ç—å!</b>\n–Ø –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ –≥–ª—É—à–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞üôÉ",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            var replyUser = msg.ReplyToMessage.From;
                            var targetUser = await bot.GetChatMemberAsync(chat.Id, replyUser.Id);
                    
                            var targetUserAdministrator = targetUser.Status;
                            if(targetUser.Status == ChatMemberStatus.Creator)
                                targetUserAdministrator = ChatMemberStatus.Administrator;
                            
                            if(replyUser.Id == Program.Bot.Id)
                                await bot.SendTextMessageAsync(chat.Id,
                                text: "–ï—Å–ª–∏ —è –∑–∞–≥–ª—É—à—É —Å–µ–±—è, —Ç–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—èü§î?",
                                replyToMessageId: msg.MessageId);
                            
                            else if(targetUser.Status == ChatMemberStatus.Administrator) {
                                await bot.SendTextMessageAsync(chatId: chat.Id,
                                    text: $"<b>–ó–∞–≥–ª—É—à–∏—Ç—å <a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> —è –Ω–µ –º–æ–≥—É, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòë.\n\n–°–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±—Å—É–∂–¥–∞–π—Ç–µ –≤ –ª–∏—á–∫–∞—Öüò†!",
                                    replyToMessageId: msg.MessageId,
                                    parseMode: ParseMode.Html,
                                    disableWebPagePreview: true);
                            }
                            else {
                                var args = text.ToLower().Split(' ');
                                if(args.Length < 3) {
                                    await bot.SendTextMessageAsync(chat.Id,
                                        text: $"<b>‚ùï–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –∑–∞—à–ª—É—à–∏—Ç—å –µ–≥–æ</b>",
                                        replyToMessageId: msg.MessageId,
                                        parseMode: ParseMode.Html,
                                        disableWebPagePreview: true);
                                }
                                else {
                                    int times = 0;
                                    if(!int.TryParse(args[1], out times)) {
                                        await bot.SendTextMessageAsync(chat.Id,
                                            text: $"<b>‚ùóÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª—É—à–µ–Ω–∏—è</b>",
                                            replyToMessageId: msg.MessageId,
                                            parseMode: ParseMode.Html,
                                            disableWebPagePreview: true);
                                    }
                                    else {
                                        switch (args[2]) {
                                            case "–º–∏–Ω—É—Ç":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMinutes(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –º–∏–Ω—É—Ç</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "–º–∏–Ω—É—Ç—ã":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMinutes(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –º–∏–Ω—É—Ç—ã</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "–º–∏–Ω—É—Ç—É":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMinutes(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –º–∏–Ω—É—Ç—É</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                                
                                            case "—á–∞—Å":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddHours(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} —á–∞—Å</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "—á–∞—Å–∞":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddHours(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} —á–∞—Å–∞</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "—á–∞—Å–æ–≤":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddHours(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} —á–∞—Å–æ–≤</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            
                                            case "–¥–µ–Ω—å":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddDays(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –¥–µ–Ω—å</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "–¥–Ω—è":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddDays(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –¥–Ω—è</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "–¥–Ω–µ–π":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddDays(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –¥–Ω–µ–π</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                                
                                            case "–º–µ—Å—è—Ü":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMonths(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –º–µ—Å—è—Ü</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "–º–µ—Å—è—Ü–∞":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMonths(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –º–µ—Å—è—Ü–∞</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            case "–º–µ—Å—è—Ü–µ–≤":
                                                await bot.RestrictChatMemberAsync(chat.Id, replyUser.Id, untilDate: DateTime.UtcNow.AddMonths(times), permissions: mutePermissions);
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>üîá–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ <b><a href=\"tg://user?id={replyUser.Id}\">{replyUser.FirstName}</a></b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {times} –º–µ—Å—è—Ü–µ–≤</b>\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—èüòá",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                            
                                            default:
                                                await bot.SendTextMessageAsync(chat.Id,
                                                    text: $"<b>\"{args[2]}\" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–µ–º‚ùå</b>",
                                                    replyToMessageId: msg.MessageId,
                                                    parseMode: ParseMode.Html,
                                                    disableWebPagePreview: true);
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(text.ToLower().StartsWith(".–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ ")) {
                    ChatMember botAdmin = await bot.GetChatMemberAsync(chat.Id, Program.Bot.Id);
                    ChatMember outputMember = await bot.GetChatMemberAsync(chat.Id, user.Id);

                    var outputMemberStatus = outputMember.Status;
                    if(outputMember.Status == ChatMemberStatus.Creator)
                        outputMemberStatus = ChatMemberStatus.Administrator;
                    
                    if(botAdmin.Status != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "‚ùï–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É —Å–æ–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                            replyToMessageId: msg.MessageId);
                    }
                    else if(outputMemberStatus != ChatMemberStatus.Administrator) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else if(chat.Type != ChatType.Supergroup) {
                        await bot.SendTextMessageAsync(chatId: chat.Id,
                            text: "<b>üö´–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:</b> —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π",
                            replyToMessageId: msg.MessageId,
                            parseMode: ParseMode.Html);
                    }
                    else {
                        var parserOperation = long.TryParse(text.ToLower().Split(".–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ ")[1], out var chatId);
                        var config = new LauraChatManager.Types.Chat();
                        foreach(var chatConfig in Program.Chats) {
                            if(chatConfig.Id == chat.Id) {
                                config = chatConfig;
                                break;
                            }
                        }
                        if(!parserOperation) {
                            await bot.SendTextMessageAsync(chat.Id,
                                text: "<b>üí¢–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω ID-—á–∞—Ç–∞</b>",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else if(config.ReportStorage != 0) {
                            var chatR = await bot.GetChatAsync(config.ReportStorage);
                            await bot.SendTextMessageAsync(chat.Id,
                                text: $"üí¢–í–∞—à —á–∞—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ <b>\"{chatR.Title}\"</b> | <code>{chatR.Id}</code>!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–æ—Ç —á–∞—Ç –æ—Ç–≤—è–∑–∞—Ç—å –æ—Ç —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ",
                                replyToMessageId: msg.MessageId,
                                parseMode: ParseMode.Html);
                        }
                        else {
                            try {
                                var chatR = await bot.GetChatAsync(config.ReportStorage);
                                if(chatR.Type != ChatType.Supergroup) {
                                    var message = "<b>‚õîÔ∏è–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞!</b>\n";
                                    switch(chatR.Type) {
                                        case ChatType.Group:
                                            message += "<i>–î–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π, —Å–¥–µ–ª–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–π —á–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º</i>";
                                            break;
                                        case ChatType.Channel:
                                            message += "<i>–ö–∞–Ω–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞</i>";
                                            break;
                                        default:
                                            message += "<i>–í—ã —É–∫–∞–∑–∞–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —á–∞—Ç–∞</i>";
                                            break;
                                    }
                                    if(chatR.IsForum.HasValue && chatR.IsForum.Value) 
                                        message = "<b>‚õîÔ∏è–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞!</b>\n<i>–î–∞–Ω–Ω—ã–π —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º</i>";
                                    await bot.SendTextMessageAsync(chat.Id,
                                        text: message,
                                        parseMode: ParseMode.Html,
                                        replyToMessageId: msg.MessageId);
                                }
                                else {
                                    var end = DateTime.UtcNow.AddMinutes(5);
                                    await ReportStorageReqStorage.CreateReportStorageRequest(new() {TargetChat = chat.Id, OutputChat = chatR.Id, Expire = end});
                                    await bot.SendTextMessageAsync(chatId, 
                                        $"üî∞–ß–∞—Ç \"{chat.Title}\" | <code>{chat.Id}</code> –∫–∏–Ω—É–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–ø–æ—Ä—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞.\n–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å?\n\n–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–µ—á–µ—Ç {end.ToString(Configuration.Config.StandartDateFormat, CultureInfo.InvariantCulture)} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ UTC",
                                        parseMode: ParseMode.Html,
                                        replyMarkup: ReportStorageButtons.GetRequestButton());
                                    await Task.Delay(350);
                                    await bot.SendTextMessageAsync(chat.Id,
                                        text: "‚úÖ–ó–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω!",
                                        replyToMessageId: msg.MessageId);
                                }
                            }
                            catch(Exception) {

                            }
                        }
                    }
                }
                #endregion
                
                if(text.ToLower() == ".—Å–æ—Å—Ç–æ—è–Ω–∏–µ") {
                    TimeSpan time = Program.NextLarxUpdate - DateTime.UtcNow;
                    await bot.SendTextMessageAsync(
                        chatId: chat.Id,
                        text:
@$"<b>–ú–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µüå∏:</b>
- –ü–∏–Ω–≥: <code>{Program.Ping} –º—Å</code>
- –ü–∏–Ω–≥ –±–∞–∑—ã: <code>{Program.DbPing} –º—Å</code>
- RAM: <code>{Program.RamUsage} –ú–ë</code>

<b><i>–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: </i></b>
<code>{time.Hours} —á–∞—Å–æ–≤ {time.Minutes} –º–∏–Ω—É—Ç {time.Seconds} —Å–µ–∫—É–Ω–¥</code>",
                        replyToMessageId: msg.MessageId,
                        parseMode: ParseMode.Html);
                }
            }
        }
    }
}
